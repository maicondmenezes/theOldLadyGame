{"version":3,"sources":["components/Square.jsx","components/layout/Board.jsx","components/layout/GameScreen.jsx","components/App.jsx","index.js"],"names":["props","Button","variant","playerSimbol","color","className","onClick","Board","createTable","indexSquare","table","i","children","j","push","renderSquare","this","squares","React","Component","GameScreen","handleChange","event","newValue","setState","value","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","concat","step","status","current","winner","moves","map","move","desc","BottomNavigationAction","label","key","icon","jumpTo","title","handleClick","BottomNavigation","onChange","showLabels","lines","a","b","c","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.4894da09.chunk.js","sourcesContent":["import './Square.css';\r\nimport React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport default props =>\r\n  <Button \r\n    variant={props.playerSimbol ? 'contained' : 'outlined'}\r\n    color={props.playerSimbol === 'X' ? 'primary' : 'secondary'} \r\n    className ='square'      \r\n    onClick   ={props.onClick}\r\n  >          \r\n    {props.playerSimbol}\r\n  </Button>","import './Board.css'\r\nimport React from 'react'\r\nimport Square from '../Square'\r\n\r\nclass Board extends React.Component {\r\n\r\n  renderSquare(i) {\r\n    return(\r\n      <Square \r\n        playerSimbol = {this.props.squares[i]} \r\n        onClick = {() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n  //  fonte: https://blog.cloudboost.io/for-loops-in-react-render-no-you-didnt-6c9f4aa73778  \r\n  createTable = () => {\r\n    let indexSquare = 0\r\n    let table = []\r\n    // Outer loop to create parent\r\n    for (let i = 0; i < 3; i++) {\r\n      let children = []\r\n      //Inner loop to create children\r\n      for (let j = 0; j < 3; j++) {        \r\n        children.push(\r\n          <td className= 'board-square'>\r\n          {this.renderSquare(indexSquare)}\r\n          </td>\r\n        )\r\n        indexSquare = indexSquare + 1\r\n      }\r\n      //Create the parent and add the children\r\n      table.push(<tr className = 'board-row'>{children}</tr>)\r\n    }\r\n    return table\r\n  }\r\n\r\n  render(){   \r\n    return(      \r\n      <table className='board-table'>         \r\n        {this.createTable()}  \r\n      </table>    \r\n    );\r\n  }  \r\n}\r\n\r\nexport default Board","import './GameScreen.css'\r\nimport React from 'react'\r\nimport Board from './Board'\r\nimport Button from '@material-ui/core/Button';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\n\r\nclass GameScreen extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null)\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      value: 0,\r\n    }\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = \r\n      this.state.history.slice(0, \r\n      this.state.stepNumber + 1\r\n    );\r\n    const current = history[history.length - 1];\r\n    const squares =current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares\r\n      }]),   \r\n      stepNumber: history.length,   \r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n  \r\n  handleChange = (event, newValue) => {\r\n    this.setState({\r\n      value: newValue,\r\n    });\r\n  }\r\n  \r\n  render(){\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    \r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? '' + move : 'B';\r\n      return (\r\n        \r\n        <BottomNavigationAction \r\n          label={'Step:'+desc}\r\n          value ={'Step:'+desc}\r\n          key={move}\r\n          className='StepItem'\r\n          icon={<RestoreIcon />}\r\n          onClick={() => this.jumpTo(move)}\r\n          >\r\n            {desc}          \r\n        </BottomNavigationAction>\r\n      );\r\n    });\r\n    let status;\r\n    if(winner) {\r\n      status = 'Winner is Player ' + winner;\r\n    } else {\r\n      status = 'Next Player is ' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n    return(\r\n        <div className='GameScreen'>\r\n        <div className='Title'>\r\n          {this.props.title}\r\n        </div>\r\n        <div className='Board'>\r\n          <Board \r\n            squares ={current.squares}\r\n            onClick ={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className='Status'>\r\n          <div>{status}</div>\r\n          <p className='StepTitle'>Steps:</p>\r\n          <BottomNavigation \r\n            value={this.value}\r\n            onChange = {this.handleChange}\r\n            className='Steps' \r\n            showLabels           \r\n          >\r\n            {moves}\r\n          </BottomNavigation>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default GameScreen\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] \r\n        && squares[a] === squares[b] \r\n        && squares[a] === squares[c]){\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}","import './App.css'\r\nimport './Square.css'\r\nimport React from 'react'\r\nimport GameScreen from './layout/GameScreen'\r\n\r\nexport default props => (\r\n  <div className = 'App'>\r\n    <GameScreen title = '-The Old Lady Game-' />        \r\n  </div>\r\n)\r\n","import './index.css'\r\nimport App from './components/App'\r\nimport React from 'react'\r\nimport ReactDom from 'react-dom'\r\n\r\nReactDom.render(\r\n  <App />,  \r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}